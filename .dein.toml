# ---------------------------------------------------------------------
# Github から取得する場合
# repo = 'user_name/repository_name'
#
# vim-scriptsから取得する場合
# スクリプト名一覧 http://vim-scripts.org/vim/scripts.html
# repo = 'script_name'
#
# 上記以外のgitリポジトリから取得する場合
# repo = 'git://repository_url'
# ---------------------------------------------------------------------
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc'
hook_post_update = '''
    if dein#util#_is_cygwin()
        let cmd = 'make -f make_cygwin.mak'
    elseif executable('gmake')
        let cmd = 'gmake'
    else
        let cmd = 'make'
    endif
    let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/unite.vim'
hook_add = '''
    let g:unite_enable_start_insert = 0

    nnoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')
    inoremap <silent> <buffer> <expr> <C-l> unite#do_action('split')
    nnoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')
    inoremap <silent> <buffer> <expr> <C-v> unite#do_action('vsplit')

    " キーバインド {{{
    nnoremap [unite] <Nop>
    nmap f [unite]

    " バッファ一覧
    nnoremap <silent> [unite]b :<C-u>Unite buffer<CR>

    " レジスタ一覧 
    nnoremap <silent> [unite]r :<C-u>Unite -buffer-name=register register<CR>

    " 最近使用したファイル一覧 
    nnoremap <silent> [unite]m :<C-u>Unite file_mru buffer<CR>

    " ブックマーク一覧
    nnoremap <silent> [unite]c :<C-u>Unite bookmark<CR>

    " ブックマークに追加
    nnoremap <silent> [unite]a :<C-u>UniteBookmarkAdd<CR>

    " 整形
    nnoremap <silent> [unite]l :<C-u>Unite alignta<CR>
    " }}}
'''

[[plugins]]
repo = 'Shougo/unite-help'

[[plugins]]
repo = 'osyo-manga/unite-quickfix'

[[plugins]]
repo = 'osyo-manga/unite-filetype'

[[plugins]]
repo = 'h1mesuke/vim-alignta'

[[plugins]]
repo = 'thinca/vim-ref'
hook_add = '''
    " vim-ref 設定 {{{
    " S-k でマニュアル検索
    let g:ref_phpmanual_path = $HOME . '/.vim/reference/php/'

    " webdict
    let g:ref_source_webdict_sites = {
    \   'eijiro': {
    \     'url': 'http://eow.alc.co.jp/search?q=%s',
    \   },
    \ }
    let g:ref_source_webdict_sites.default = 'eijiro'

    " 出力に対するフィルタ
    function! g:ref_source_webdict_sites.eijiro.filter(output)
        return join(split(a:output, "\n")[35 :], "\n")
    endfunction

    " refをqで閉じる
    augroup CloseHelpWithQRef
        autocmd!
        autocmd FileType ref-* nnoremap <buffer><silent>q :<C-u>close<CR>
        autocmd BufEnter ==Translate==\ Excite nnoremap <buffer><silent>q :<C-u>close<CR>
    augroup END

    " カーソル下のキーワードをヘルプでひく
    nnoremap <C-i>k :<C-u>Ref webdict <C-r><C-w><CR>
    nnoremap <C-i>e :ExciteTranslate<CR>
    " }}}
'''

[[plugins]]
repo = 'mmisono/ref-dicts-en'

[[plugins]]
repo = 'mattn/webapi-vim'

[[plugins]]
repo = 'mattn/excitetranslate-vim'

[[plugins]]
repo = 'taglist.vim'
hook_add = '''
    if (executable('/usr/bin/ctags'))
      let g:Tlist_Ctags_Cmd = '/usr/bin/ctags'
    elseif (executable('/usr/local/bin/ctags'))
      let g:Tlist_Ctags_Cmd = '/usr/local/bin/ctags'
    endif
    let g:Tlist_Exit_OnlyWindow = 1
    let g:Tlist_Use_Right_Window = 1

    nnoremap <silent><Leader>l :<C-u>TlistToggle<CR>
'''

[[plugins]]
repo = 'Shougo/vimfiler'
lazy = 1
hook_add = '''
    " vimfiler をデフォルトのファイラーにする
    let g:vimfiler_as_default_explorer = 1

    nnoremap <silent> ff :<C-u>VimFilerBufferDir -quit<CR>
    nnoremap <silent> fi :<C-u>:VimFilerBufferDir -buffer-name=explorer -split -simple -winwidth=35 -no-quit<CR>
'''
hook_source = '''
    call vimfiler#custom#profile('default', 'context', {
    \ 'safe': 0,
    \ })
'''

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'thinca/vim-ft-help_fold'

[[plugins]]
repo = 'sheerun/vim-polyglot'

# quickrun ####
[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
" quickrun {{{
    " quickrun の実行を非同期実行にする
    " 実行処理設定(runner)    : vimproc
    " 出力処理設定(outputter) : multi(bufferとquickfixを使う)
    " フック処理(hook)        :
    "  close_buffer: 実行に失敗した場合にバッファを閉じる
    "  close_quickfix: 実行終了時にquickfixを閉じる
    "  unite_quickfix: 実行失敗時にunite_quickfixを起動する
    "  close_unite_quickfix:
    "  すでにunite_quickfixを開いている場合は閉じてから実行
    "
    " execオプションの書式
    " %%: %自体
    " %c: コマンド('command'で指定したもの)
    " %o: コマンドラインオプション('cmdopt'で指定したもの)
    " %s: ソースファイル
    " %a: スクリプトの引数
    let g:quickrun_config = {
    \ '_': {
    \   'runner': 'vimproc',
    \   'runner/vimproc/updatetime': 40,
    \   'outputter': 'multi:buffer:quickfix',
    \   'outputter/buffer/split': ':botright 8sp',
    \   'outputter/buffer/close_on_empty': 1,
    \   'hook/close_buffer/enable_failure': 1,
    \   'hook/close_quickfix/enable_exit': 1,
    \   'hook/close_unite_quickfix/enable_hook_loaded': 1,
    \   'hook/back_window/enable_exit': 1,
    \   'hook/back_window/priority_exit': 1,
    \   'hook/quickfix_status_enable/enable_exit': 1,
    \   'hook/quickfix_status_enable/priority_exit': 2,
    \   'hook/qfsigns_update/enable_exit': 1,
    \   'hook/qfsigns_update/priority_exit': 3,
    \   'hook/qfstatusline_update/enable_exit': 1,
    \   'hook/qfstatusline_update/priority_exit': 4,
    \ },
    \ 'watchdogs_checker/_': {
    \ },
    \ 'watchdogs_checker/php': {
    \   'command': 'php',
    \   'exec': '%c -d error_reporting=E_ALL -d display_errors=1 -d display_startup_errors=1 -d log_errors=0 -d xdebug.cli_color=0 -l %o %s:p',
    \   'errorformat': '%m\ in\ %f\ on\ line\ %l',
    \ },
    \ }

    " \   'hook/unite_quickfix/enable_failure': 1,
    " \   'hook/back_window/enable_exit': 1,
    " \   'hook/back_window/priority_exit': 1,
    " \   'hook/quickfix_status_enable/enable_exit': 1,
    " \   'hook/quickfix_status_enable/priority_exit': 2,

    " watchdogsの設定をquickrunに追加する
    call watchdogs#setup(g:quickrun_config)

    " ファイル書き込み時にチェックするかどうか
    let g:watchdogs_check_BufWritePost_enable = 0
    let g:watchdogs_check_BufWritePost_enables = {
    \   'php': 1,
    \ }

    " 一定時間キー入力がなかったらチェックする
    let g:watchdogs_checkCursorHold_enable = 1
    let g:watchdogs_checkCursorHold_enables = {
    \   'php': 1,
    \ }

    " :WatchdogsRun後にlightline.vimを更新
    let g:Qfstatusline#UpdateCmd = function('lightline#update')

    " <Leader>qでquickfixを閉じる
    " nnoremap <silent><Leader>q :<C-u>bwipeout! \[quickrun\ output\]<CR>
    nnoremap <silent><Leader>q :<C-u>call <SID>QuickrunCloseWithQ()<CR>
    function! s:QuickrunCloseWithQ()
        try
            if exists(":UniteClose")
                silent execute ":UniteClose"
            endif
            bwipeout! [quickrun
        catch
        endtry
    endfunction
    " }}}
'''

[[plugins]]
repo = 'osyo-manga/shabadou.vim'

[[plugins]]
repo = 'cohama/vim-hier'

[[plugins]]
repo = 'dannyob/quickfixstatus'

[[plugins]]
repo = 'KazuakiM/vim-qfsigns'

[[plugins]]
repo = 'KazuakiM/vim-qfstatusline'

[[plugins]]
repo = 'osyo-manga/vim-watchdogs'
##############

[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
    nmap n <Plug>(anzu-n)
    nmap N <Plug>(anzu-N)
    nmap * <Plug>(anzu-star)
    nmap # <Plug>(anzu-sharp)
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
lazy = 1
on_event = ['VimEnter']
hook_post_source = '''
" lightline {{{
    " http://itchyny.hatenablog.com/entry/20130828/1377653592
    " http://itchyny.hatenablog.com/entry/20130917/1379369171

    set laststatus=2
    set noshowmode
    if !has('gui_running')
        set t_Co=256
    endif

    " mode: モード表示(ex. NORMAL )
    " paste: Paste表示(ex. PASTE)
    " readonly: 読み込み専用表示(ex. RO)
    " filename: ファイル名表示(ex. .vimrc)
    " modified: 変更状態表示(ex. +)
    " fugitive: Gitリポジトリ表示
    " fileformat: 改行コード(ex. unix)
    " filetype: ファイル形式(ex. vim)
    " fileencoding: 文字コード(ex. utf-8)
    "
    " 'active': 左側表示を[モード+Paste][Gitリポジトリ+ファイル名]にする
    "
    " "\ue0a0" : Git
    " "\ue0a1" : LN
    " "\ue0a2" : 鍵マーク
    " "\ue0b0" : 右向き三角（塗りつぶし）
    " "\ue0b2" : 左向き三角（塗りつぶし）
    " "\ue0b1" : 右向き三角（塗りつぶしなし）
    " "\ue0b3" : 左向き三角（塗りつぶしなし）
    let g:lightline = {
    \ 'colorscheme': 'jellybeans',
    \ 'active': {
    \   'left' : [ ['mode', 'paste'], ['fugitive', 'filename', 'qfstatusline', 'anzu'] ],
    \   'right': [ ['lineinfo'], ['percent'], ['fileformat', 'fileencoding', 'filetype'] ],
    \ },
    \ 'component': {
    \   'lineinfo': "%3l:%-2v",
    \ },
    \ 'component_expand': {
    \   'qfstatusline': 'qfstatusline#Update',
    \ },
    \ 'component_type': {
    \   'qfstatusline': 'error',
    \ },
    \ 'component_function': {
    \   'mode'         : 'LightLineMode',
    \   'readonly'     : 'LightLineReadonly',
    \   'filename'     : 'LightLineFilename',
    \   'modified'     : 'LightLineModified',
    \   'fugitive'     : 'LightLineFugitive',
    \   'fileformat'   : 'LightLineFileformat',
    \   'fileencoding' : 'LightLineFileencoding',
    \   'filetype'     : 'LightLineFiletype',
    \   'anzu'         : 'LightLineAnzu',
    \ },
    \ 'separator': { 'left': "", 'right': "" },
    \ 'subseparator': { 'left': "|", 'right': "|" },
    \ }

    " モード表示(表示幅が狭ければ表示しない)
    function! LightLineMode()
        return &ft == 'unite' ? 'Unite' :
            \ &ft == 'vimfiler' ? 'VimFiler' :
            \ winwidth(0) > 60 ? lightline#mode() : ''
    endfunction

    " 読み込み専用(読み込み専用であれば"x")
    function! LightLineReadonly()
        return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? "ReadOnly" : ''
    endfunction

    " ファイル名(前後に読み込み専用と変更状態を挿入する)
    function! LightLineFilename()
        return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
    endfunction

    " 変更状態(変更されていれば"+"、変更できない場合は"-")
    function! LightLineModified()
        return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
    endfunction

    " Gitリポジトリ(fugitiveがあればリポジトリのHEAD名を表示)
    function! LightLineFugitive()
        try
            if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
                let _ = fugitive#head()
                return strlen(_) ? "Git: " . _ : ''
            endif
        catch
        endtry
        return ''
    endfunction

    function! LightLineFileformat()
        return winwidth(0) > 70 ? &fileformat : ''
    endfunction

    function! LightLineFileencoding()
        return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
    endfunction

    function! LightLineFiletype()
        return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
    endfunction

    function! LightLineAnzu()
        return anzu#search_status()
    endfunction
    " }}}
'''

[[plugins]]
repo = 'w0ng/vim-hybrid'
lazy = 1
on_event = ['VimEnter']
hook_post_source = '''
    if has('mac')
        let g:hybrid_use_iTerm_colors = 1
    endif

    syntax on
    colorscheme hybrid
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
    let g:indent_guides_auto_colors = 0
    " augroup indentGuidesSettings
    "     autocmd!
        autocmd VimEnter,Colorscheme * :highlight IndentGuidesOdd  ctermbg=239
        autocmd VimEnter,Colorscheme * :highlight IndentGuidesEven ctermbg=242
        " g:indent_guides_enable_on_vim_startup だけではうまくいかなかった
        " autocmd VimEnter,BufWinEnter * :IndentGuidesEnable
    " augroup END
    " let g:indent_guides_color_change_percent = 30
    let g:indent_guides_guide_size = 1
    let g:indent_guides_start_level = 2
    let g:indent_guides_enable_on_vim_startup = 0
    let g:indent_guides_exclude_filetypes = ['help']
'''

[[plugins]]
repo = 't9md/vim-quickhl'
hook_add = '''
    nmap <Leader>m <Plug>(quickhl-manual-this)
    xmap <Leader>m <Plug>(quickhl-manual-this)
    nmap <Leader>M <Plug>(quickhl-manual-reset)
    xmap <Leader>M <Plug>(quickhl-manual-reset)
'''

[[plugins]]
repo = 'LeafCage/foldCC.vim'
hook_add = '''
    " foldCC {{{
    " ---------------------------------------------------------------------
    " http://d.hatena.ne.jp/leafcage/20111223/1324705686
    " http://leafcage.hateblo.jp/entry/2013/04/24/053113
    " ---------------------------------------------------------------------
    set foldtext=FoldCCtext()
    let g:foldCCtext_enable_autofdc_adjuster = 1
    set foldcolumn=3
    set fillchars=vert:\|
    set foldmethod=marker

    " マーカーの追加
    nnoremap  z[     :<C-u>call <SID>put_foldmarker(0)<CR>
    nnoremap  z]     :<C-u>call <SID>put_foldmarker(1)<CR>
    function! s:put_foldmarker(foldclose_p) " {{{
        let crrstr = getline('.')
        let padding = crrstr=='' ? '' : crrstr=~'\s$' ? '' : ' '
        let [cms_start, cms_end] = ['', '']
        let outside_a_comment_p = synIDattr(synID(line('.'), col('$')-1, 1), 'name') !~? 'comment'
        if outside_a_comment_p
            let cms_start = matchstr(&cms,'\V\s\*\zs\.\+\ze%s')
            let cms_end = matchstr(&cms,'\V%s\zs\.\+')
        endif
        let fmr = split(&fmr, ',')[a:foldclose_p]. (v:count ? v:count : '')
        exe 'norm! A'. padding. cms_start. fmr. cms_end
    endfunction
    " }}}

    " 次のマーカーへ移動
    nnoremap <silent>zj :<C-u>call <SID>smart_foldjump('j')<CR>
    nnoremap <silent>zk :<C-u>call <SID>smart_foldjump('k')<CR>
    function! s:smart_foldjump(direction) "{{{
        if a:direction == 'j'
            let [cross, trace, compare] = ['zj', ']z', '<']
        else
            let [cross, trace, compare] = ['zk', '[z', '>']
        endif

        let i = v:count1
        while i
            let save_lnum = line('.')
            exe 'keepj norm! '. trace
            let trace_lnum = line('.')
            exe save_lnum

            exe 'keepj norm! '. cross
            let cross_lnum = line('.')
            if cross_lnum != save_lnum && eval('cross_lnum '. compare. ' trace_lnum') || trace_lnum == save_lnum
                let i -= 1
                continue
            endif

            exe trace_lnum
            let i -= 1
        endwhile
        mark `
        norm! zz
    endfunction
    "}}}

    " フォールドレベル
    nnoremap <silent>z0    :set foldlevel=0<CR>
    nnoremap <silent>z1    :set foldlevel=1<CR>
    nnoremap <silent>z2    :set foldlevel=2<CR>
    nnoremap <silent>z3    :set foldlevel=3<CR>
    nnoremap <silent>zu    :set foldlevel=<C-r>=foldlevel('.')-1<CR><CR>
    " }}}
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
    let g:neosnippet#snippets_directory = $HOME.'/.vim/snippets'

    " スニペットを展開する
    imap <C-k> <Plug>(neosnippet_expand_or_jump)
    smap <C-k> <Plug>(neosnippet_expand_or_jump)
    xmap <C-k> <Plug>(neosnippet_expand_target)
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/neocomplete.vim'
hook_add = '''
    " neocomplete {{{
    " 競合するのでAutoComplPopを無効化する
    let g:acp_enableAtStartup = 0

    " 起動時にneocomplecacheを有効にする
    let g:neocomplete#enable_at_startup = 1

    " 大文字が入力されるまで大文字小文字の区別を無視する
    let g:neocomplete#enable_smart_case = 1

    " シンタックスをキャッシュするときの最小文字数
    let g:neocomplete#sources#syntax#min_keyword_length = 3

    " neocomplete を自動的にロックするバッファ名のパターン
    let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

    " 辞書補完の辞書を指定。filetype:辞書ファイル名
    let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ }

    " キーワードの定義
    if !exists('g:neocomplete#keyword_patterns')
      let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns['default'] = '\h\w*'

    " キーマッピング
    " <C-g>: UNDO
    " <C-l>: 補完候補の共通部分までを補完する
    " <C-y>: 補完を確定
    " <C-e>: 補完のキャンセル
    " <CR>: ポップアップを閉じてインデントを保存
    " <TAB> で補完
    " <C-h>, <BS>: ポップアップを閉じて<BS>
    inoremap <expr><C-g> neocomplete#undo_completion()
    inoremap <expr><C-l> neocomplete#complete_common_string()
    inoremap <expr><C-y> neocomplete#close_popup()
    inoremap <expr><C-e> neocomplete#cancel_popup()
    inoremap <silent><CR> <C-r>=<SID>my_cr_function()<CR>
    inoremap <expr><TAB>   pumvisible() ? "\<Down>" : "\<TAB>"
    inoremap <expr><S-TAB> pumvisible() ? "\<UP>"   : "\<S-TAB>"
    inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><BS> neocomplete#smart_close_popup()."\<BS>"

    function! s:my_cr_function()
        " For no inserting <CR> key.
        return pumvisible() ? "\<C-y>" : "\<CR>"
    endfunction

    " オムニ補完を有効にする
    augroup OmnicompleteSettings
        autocmd!
        autocmd FileType css           setlocal omnifunc=csscomplete#CompleteCSS
        autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
        autocmd FileType javascript    setlocal omnifunc=javascriptcomplete#CompleteJS
        autocmd FileType xml           setlocal omnifunc=xmlcomplete#CompleteTags
    augroup END

    " 重いオムニ補完を有効にする
    if !exists('g:neocomplete#sources#omni#input_patterns')
      let g:neocomplete#sources#omni#input#patterns = {}
    endif

    " neocomplete-php
    let g:neocomplete_php_locale = 'ja'
    " }}}
'''

[[plugins]]
repo = 'cohama/lexima.vim'
hook_add = '''
    let g:lexima_no_default_rules     = 0
    let g:lexima_enable_basic_rules   = 1
    let g:lexima_enable_newline_rules = 0
    let g:lexima_enable_space_rules   = 1
    let g:lexima_enable_endwise_rules = 0
'''

[[plugins]]
repo = 'violetyk/neocomplete-php.vim'

[[plugins]]
repo = 'osyo-manga/vim-precious'

[[plugins]]
repo = 'tmhedberg/matchit'
hook_add = '''
    let b:match_ignorecase = 1
'''

[[plugins]]
repo = 'kana/vim-smartword'
hook_add = '''
    map w <Plug>(smartword-w)
    map b <Plug>(smartword-b)
    map e <Plug>(smartword-e)
    map ge <Plug>(smartword-ge)

    map ,w <Plug>CamelCaseMotion_w
    map ,b <Plug>CamelCaseMotion_b
    map ,e <Plug>CamelCaseMotion_e
    map ,ge <Plug>CamelCaseMotion_ge
'''

[[plugins]]
repo = 'bkad/CamelCaseMotion'

[[plugins]]
repo = 'tomtom/tcomment_vim'
hook_add = '''
    if !exists( 'g:tcomment_types' )
      let g:tcomment_types = {}
    endif
    let g:tcomment_types = {
    \ 'php_surround' : "<?php %s ?>",
    \ 'php_surround_echo' : "<?php echo %s ?>"
    \ }

    augroup TCommentSettings
        autocmd!
        autocmd FileType php inoremap <buffer><C-_>c :TCommentAs php_surround<CR>
        autocmd FileType php inoremap <buffer><C-_>= :TCommentAs php_surround_echo<CR>
        autocmd FileType php inoremap <buffer><C-_>e :TCommentAs php_surround_echo<CR>
    augroup END

    " <C-_>b ブロックコメント
    " <C-_>i 囲むようにコメント
    " Space + / コメントをトグル
    nnoremap <Leader>/ :TComment<CR>
    vnoremap <Leader>/ :TComment<CR>
'''

[[plugins]]
repo = 'taku-o/vim-toggle'
hook_add = '''
    imap <C-t> <Plug>ToggleI
    nmap <C-t> <Plug>ToggleN
    vmap <C-t> <Plug>ToggleV
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'vim-scripts/HTML-AutoCloseTag'

[[plugins]]
repo = 'hail2u/vim-css3-syntax'

[[plugins]]
repo = 'gorodinskiy/vim-coloresque'

[[plugins]]
repo = 'tpope/vim-haml'

[[plugins]]
repo = 'mattn/emmet-vim'
hook_add = '''
    " <C-y>,
    let g:user_emmet_settings = {
    \ 'lang' : 'ja',
    \ 'indentation' : '    ',
    \ 'javascript' : {
    \     'snippets' : {
    \         'jq' : "$function(){\n\t${cursor}${child}\n};",
    \         'jq:each' : "$.each(${cursor}, function(index, item){\n\t${child}\n});",
    \         'fn' : "(function(){\n\t${cursor}\n})();",
    \         'tm' : "setTimeout(function(){\n\t${cursor}\n}, 100);",
    \     },
    \ },
    \ 'php' : {
    \     'extends' : 'html',
    \     'filters' : 'html',
    \ },
    \ }
'''

# テキストオブジェクト {{{
# ixxx, axxx xxxはテキストオブジェクトが入る。
# 意味は i:inner a:a
# aw iw             | 単語（iskeyword）
# aW iW             | 単語（空白区切り）
# as is             | 分（sentence）
# ap ip             | 段落（paragraph）
# a[ a] i[ i]       | [
# a( a) i( i) ib    | (
# a< a> i< i>       | <
# at it             | Htmlタグ（tag）
# a{ a} aB i{ i} iB | {
# a# a' a` i# i' i` | # ' ``
# 
# テキストオブジェクトを囲んだりする vim bible 5-14
# ys{motion}{surround}            : surround で囲む
# ds{surround}                    : surround を削除する
# cs{old-surround}{new-surround}  : surround を変更する
[[plugins]]
repo = 'tpope/vim-surround'

# . で surround.vim の作業を繰り返す vim bible 5-16
[[plugins]]
repo = 'tpope/vim-repeat'

# テキストオブジェクト vim bible 5-15
# テキストオブジェクトを簡単に作成するためのコアモジュール
[[plugins]]
repo = 'kana/vim-textobj-user'

# [i] インデントをテキストオブジェクトにする
[[plugins]]
repo = 'kana/vim-textobj-indent'

# [y] syntax highlight されたものをテキストオブジェクトにする
[[plugins]]
repo = 'kana/vim-textobj-syntax'

# [l] １行をテキストオブジェクトにする
[[plugins]]
repo = 'kana/vim-textobj-line'

# [z] フォールディングをテキストオブジェクトにする
[[plugins]]
repo = 'kana/vim-textobj-fold'

# [e] テキスト全体をテキストオブジェクトにする
[[plugins]]
repo = 'kana/vim-textobj-entire'

# [d] 日付をテキストオブジェクトにする
[[plugins]]
repo = 'kana/vim-textobj-datetime'

# [j] カッコをテキストオブジェクトにする
[[plugins]]
repo = 'kana/vim-textobj-jabraces'

# [/][?] 最後の検索にマッチした箇所をテキストオブジェクトにする
[[plugins]]
repo = 'kana/vim-textobj-lastpat'

# [f] 任意の文字で囲まれた範囲をテキストオブジェクトにする
[[plugins]]
repo = 'thinca/vim-textobj-between'

# [c] コメントをテキストオブジェクトにする
[[plugins]]
repo = 'thinca/vim-textobj-comment'

# [,]+w/b/e/ge スネークケースやキャメルケースをテキストオブジェクトにする
[[plugins]]
repo = 'h1mesuke/textobj-wiw'

# [g] $/@/& などで始まる文字列（変数でよく使われれる）をテキストオブジェクトにする
[[plugins]]
repo = 'vimtaku/vim-textobj-sigil'

# [f] 関数の中身をテキストオブジェクトにする
[[plugins]]
repo = 'kana/vim-textobj-function'

# }}}

[[plugins]]
repo = 'banyan/recognize_charcode.vim'

[[plugins]]
repo = 'terryma/vim-expand-region'
hook_add = '''
    vmap v <Plug>(expand_region_expand)
    vmap <C-v> <Plug>(expand_region_shrink)
'''

[[plugins]]
repo = 'YankRing.vim'
hook_add = '''
    let g:yankring_history_dir = expand('$HOME')
    let g:yankring_history_file = '.yankring_history'
    let g:yankring_max_history = 10
    let g:yankring_window_height = 13
'''








